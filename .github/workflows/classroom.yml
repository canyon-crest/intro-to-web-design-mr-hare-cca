name: Autograding Tests
on:
  - push
  - workflow_dispatch
  - repository_dispatch
permissions:
  checks: write
  actions: read
  contents: read
jobs:
  run-autograding-tests:
    runs-on: ubuntu-latest
    if: github.actor != 'github-classroom[bot]'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Locate CSS path once and export for later steps
    - name: Resolve CSS path
      id: resolve-css
      run: |
        set -euo pipefail
        CSS=""
        if [[ -f styles.css ]]; then CSS="styles.css"; fi
        if [[ -z "$CSS" && -f css/styles.css ]]; then CSS="css/styles.css"; fi
        echo "css_path=$CSS" >> "$GITHUB_OUTPUT"

    # 1) 3 "</p>" in index.html  (10 pts)
    - name: Three closing P tags
      id: p-tags
      uses: classroom-resources/autograding-io-grader@v1
      with:
        test-name: 3 "</p>" in index.html
        command: |
          bash -lc '
          [[ -f index.html ]] || { echo "FAIL (index.html missing)"; exit 0; }
          c=$(grep -o "</p>" index.html | wc -l || true)
          if [[ $c -ge 3 ]]; then echo PASS; else echo "FAIL ($c)"; fi
          '
        expected-output: PASS
        comparison-method: exact
        timeout: 5
        max-score: 10

    # 2) rel="stylesheet" in index.html  (5 pts)
    - name: rel="stylesheet" present
      id: rel-stylesheet
      uses: classroom-resources/autograding-io-grader@v1
      with:
        test-name: rel="stylesheet" in index.html
        command: |
          bash -lc '
          [[ -f index.html ]] || { echo "FAIL (index.html missing)"; exit 0; }
          if grep -q 'rel="stylesheet"' index.html; then echo PASS; else echo "FAIL"; fi
          '
        expected-output: PASS
        comparison-method: exact
        timeout: 5
        max-score: 5

    # 3) 3 </h3>, 1 </h2>, 1 </h1> in index.html  (5 pts)
    - name: Heading closers mix
      id: headings-mix
      uses: classroom-resources/autograding-io-grader@v1
      with:
        test-name: 3 </h3>, 1 </h2>, 1 </h1> in index.html
        command: |
          bash -lc '
          [[ -f index.html ]] || { echo "FAIL (index.html missing)"; exit 0; }
          h3=$(grep -o "</h3>" index.html | wc -l || true)
          h2=$(grep -o "</h2>" index.html | wc -l || true)
          h1=$(grep -o "</h1>" index.html | wc -l || true)
          if [[ $h3 -ge 3 && $h2 -ge 1 && $h1 -ge 1 ]]; then echo PASS; else echo "FAIL (h3=$h3,h2=$h2,h1=$h1)"; fi
          '
        expected-output: PASS
        comparison-method: exact
        timeout: 5
        max-score: 5

    # 4) 3 "</img>" in index.html AND "float:" in styles.css  (5 pts)
    - name: Closing IMG tags + float in CSS
      id: img-close-and-float
      uses: classroom-resources/autograding-io-grader@v1
      with:
        test-name: 3 "</img>" in index.html and "float:" in styles.css
        command: |
          bash -lc '
          CSS="${{ steps.resolve-css.outputs.css_path }}"
          [[ -f index.html ]] || { echo "FAIL (index.html missing)"; exit 0; }
          [[ -n "$CSS" ]] || { echo "FAIL (styles.css not found)"; exit 0; }
          ic=$(grep -o "</img>" index.html | wc -l || true)
          if grep -qi "float:" "$CSS" && [[ $ic -ge 3 ]]; then echo PASS; else echo "FAIL (</img>=$ic,float=$(grep -qi "float:" "$CSS" && echo 1 || echo 0))"; fi
          '
        expected-output: PASS
        comparison-method: exact
        timeout: 5
        max-score: 5

    # 5) 3 "</a>" in index.html  (5 pts)
    - name: Three closing anchor tags
      id: a-close
      uses: classroom-resources/autograding-io-grader@v1
      with:
        test-name: 3 "</a>" in index.html
        command: |
          bash -lc '
          [[ -f index.html ]] || { echo "FAIL (index.html missing)"; exit 0; }
          c=$(grep -o "</a>" index.html | wc -l || true)
          if [[ $c -ge 3 ]]; then echo PASS; else echo "FAIL ($c)"; fi
          '
        expected-output: PASS
        comparison-method: exact
        timeout: 5
        max-score: 5

    # 6) 2 "</div>" in index.html  (10 pts)
    - name: Two closing DIV tags
      id: div-close
      uses: classroom-resources/autograding-io-grader@v1
      with:
        test-name: 2 "</div>" in index.html
        command: |
          bash -lc '
          [[ -f index.html ]] || { echo "FAIL (index.html missing)"; exit 0; }
          c=$(grep -o "</div>" index.html | wc -l || true)
          if [[ $c -ge 2 ]]; then echo PASS; else echo "FAIL ($c)"; fi
          '
        expected-output: PASS
        comparison-method: exact
        timeout: 5
        max-score: 10

    # 7) 3 occurrences of class= (with or without space) in index.html AND at least one '.' selector in CSS  (10 pts)
    - name: Class attributes + CSS class selector
      id: class-and-css-dot
      uses: classroom-resources/autograding-io-grader@v1
      with:
        test-name: 3 "class =" or "class=" in index.html and a CSS class selector present
        command: |
          bash -lc '
          CSS="${{ steps.resolve-css.outputs.css_path }}"
          [[ -f index.html ]] || { echo "FAIL (index.html missing)"; exit 0; }
          [[ -n "$CSS" ]] || { echo "FAIL (styles.css not found)"; exit 0; }
          cls=$(grep -oE "class\s*=" index.html | wc -l || true)
          # look for a class selector like ".something" anywhere
          if [[ $cls -ge 3 ]] && grep -qE '(^|\s)\.' "$CSS"; then echo PASS; else echo "FAIL (class=$cls, css-dot=$(grep -qE '(^|\s)\.' "$CSS" && echo 1 || echo 0))"; fi
          '
        expected-output: PASS
        comparison-method: exact
        timeout: 5
        max-score: 10

    # 8) CSS includes padding, margin, border, line-height, font  (10 pts)
    - name: Core CSS properties present
      id: css-core-props
      uses: classroom-resources/autograding-io-grader@v1
      with:
        test-name: CSS includes padding, margin, border, line-height, font
        command: |
          bash -lc '
          CSS="${{ steps.resolve-css.outputs.css_path }}"
          [[ -n "$CSS" ]] || { echo "FAIL (styles.css not found)"; exit 0; }
          need=(padding margin border line-height font)
          ok=1
          for k in "${need[@]}"; do
            grep -qi "$k" "$CSS" || ok=0
          done
          if [[ $ok -eq 1 ]]; then echo PASS; else echo "FAIL"; fi
          '
        expected-output: PASS
        comparison-method: exact
        timeout: 5
        max-score: 10

    # 9) CSS includes :hover or :visited or :active  (5 pts)
    - name: CSS pseudo-classes present
      id: css-pseudoclasses
      uses: classroom-resources/autograding-io-grader@v1
      with:
        test-name: CSS has :hover or :visited or :active
        command: |
          bash -lc '
          CSS="${{ steps.resolve-css.outputs.css_path }}"
          [[ -n "$CSS" ]] || { echo "FAIL (styles.css not found)"; exit 0; }
          if grep -qiE ":[[:space:]]*hover|:[[:space:]]*visited|:[[:space:]]*active" "$CSS"; then echo PASS; else echo "FAIL"; fi
          '
        expected-output: PASS
        comparison-method: exact
        timeout: 5
        max-score: 5

    # 10) CSS has "@media max-width" 3 times (case-insensitive, typically "@media (max-width: ...)")  (10 pts)
    - name: Three @media max-width rules
      id: css-media-queries
      uses: classroom-resources/autograding-io-grader@v1
      with:
        test-name: CSS contains @media max-width at least 3 times
        command: |
          bash -lc '
          CSS="${{ steps.resolve-css.outputs.css_path }}"
          [[ -n "$CSS" ]] || { echo "FAIL (styles.css not found)"; exit 0; }
          c=$(grep -iE "@media[^{}]*max-width" "$CSS" | wc -l || true)
          if [[ $c -ge 3 ]]; then echo PASS; else echo "FAIL ($c)"; fi
          '
        expected-output: PASS
        comparison-method: exact
        timeout: 5
        max-score: 10

    - name: Autograding Reporter
      uses: classroom-resources/autograding-grading-reporter@v1
      env:
        P_TAGS_RESULTS:               "${{ steps.p-tags.outputs.result }}"
        REL_STYLESHEET_RESULTS:       "${{ steps.rel-stylesheet.outputs.result }}"
        HEADINGS_MIX_RESULTS:         "${{ steps.headings-mix.outputs.result }}"
        IMG_CLOSE_AND_FLOAT_RESULTS:  "${{ steps.img-close-and-float.outputs.result }}"
        A_CLOSE_RESULTS:              "${{ steps.a-close.outputs.result }}"
        DIV_CLOSE_RESULTS:            "${{ steps.div-close.outputs.result }}"
        CLASS_AND_CSS_DOT_RESULTS:    "${{ steps.class-and-css-dot.outputs.result }}"
        CSS_CORE_PROPS_RESULTS:       "${{ steps.css-core-props.outputs.result }}"
        CSS_PSEUDOCLASSES_RESULTS:    "${{ steps.css-pseudoclasses.outputs.result }}"
        CSS_MEDIA_QUERIES_RESULTS:    "${{ steps.css-media-queries.outputs.result }}"
      with:
        runners: >
          p-tags,
          rel-stylesheet,
          headings-mix,
          img-close-and-float,
          a-close,
          div-close,
          class-and-css-dot,
          css-core-props,
          css-pseudoclasses,
          css-media-queries
